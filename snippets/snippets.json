{
  "Import Css Module Style": {
    "prefix": "imcm",
    "body": ["import styles from '${1:./}${2:index}.css';"],
    "description": "引入本地css Module模块。Import Css Module Style"
  },
  "Import Less Module Style": {
    "prefix": "imlm",
    "body": ["import styles from '${1:./}${2:index}.less';"],
    "description": "引入本地less Module模块。Import Less Module Style"
  },
  "Import Classnames ": {
    "prefix": "imcls",
    "body": ["import cls from 'classnames';"],
    "description": "引入classnames模块。 Import Less Module Style"
  },
  "Classnames Css Style Module": {
    "prefix": "clsm",
    "body": ["{ cls(styles.${1:item}) }"],
    "description": "css module的JSX类。JSX classNames with css module"
  },
  "Classnames Css Style Module With Condition": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact,jsx-attr",
    "prefix": "clsmc",
    "body": [
      "{ cls(styles.${1:item}, {",
      "  [styles.${1/(.*)/${1}/}Active]: ${2:index} === ${3:1}",
      "})}"
    ],
    "description": "css module带有条件的JSX类。 JSX classNames with css module and condition"
  }
,
  "useState": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:null})"
    ],
    "description": [
      "Returns a stateful value, and a function to update it.\n",
      "During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\n",
      "The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component."
    ]
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "  ${0}",
      "  return () => {",
      "    ",
      "  };",
      "}, [${1}])"
    ],
    "description": [
      "Accepts a function that contains imperative, possibly effectful code.\n",
      "Mutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React’s render phase). Doing so will lead to confusing bugs and inconsistencies in the UI.\n",
      "Instead, use useEffect. The function passed to useEffect will run after the render is committed to the screen. Think of effects as an escape hatch from React’s purely functional world into the imperative world.\n",
      "By default, effects run after every completed render, but you can choose to fire it only when certain values have changed."
    ]
  },
  "useContext": {
    "prefix": "useContext",
    "body": ["const ${1:context} = useContext(${2:contextValue})"],
    "description": [
      "Accepts a context object (the value returned from React.createContext) and returns the current context value for that context. The current context value is determined by the value prop of the nearest <MyContext.Provider> above the calling component in the tree.\n",
      "When the nearest <MyContext.Provider> above the component updates, this Hook will trigger a rerender with the latest context value passed to that MyContext provider."
    ]
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": [
      "const ${1:state}Reducer = (state, action) => {",
      "  return ${3:{...state, ...action}}",
      "}",
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useReducer(${1:state}Reducer, ${2:initialState}, ${4:init})"
    ],
    "description": [
      "An alternative to useState. Accepts a reducer of type (state, action) => newState, and returns the current state paired with a dispatch method. (If you’re familiar with Redux, you already know how this works.)\n",
      "useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks."
    ]
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": [
      "const _${1/(.*)/${1:/capitalize}/} = useCallback(",
      "  () => {",
      "    ${2}",
      "  }, [${3}]",
      ")",
      "$0"
    ],
    "description": [
      "Returns a memoized callback.\n",
      "Pass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. shouldComponentUpdate)."
    ]
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": [
      "const _${1/(.*)/${1:/capitalize}/}= useMemo(() => {",
      "  return ${2}",
      "}, [${3}])",
      "$0"
    ],
    "description": [
      "Returns a memoized value.\n",
      "Pass a “create” function and an array of dependencies. useMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\n",
      "Remember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in useEffect, not useMemo.\n",
      "If no array is provided, a new value will be computed on every render."
    ]
  },
  "useRef": {
    "prefix": "useRef",
    "body": ["const ${1}Ref = useRef(${2:null})"],
    "description": "useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component."
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": [
      "useImperativeHandle(",
      "  ${1:ref},",
      "  () => {",
      "    ${2:handler}",
      "  },",
      "  [${3:input}],",
      ")"
    ],
    "description": "Customizes the instance value that is exposed to parent components when using ref. As always, imperative code using refs should be avoided in most cases."
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "   ${0}",
      "  return () => {",
      "    ",
      "  };",
      "}, [${1}])"
    ],
    "description": [
      "The signature is identical to useEffect, but it fires synchronously after all DOM mutations.\n",
      "Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint."
    ]
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": ["useDebugValue(${1:value})"],
    "description": "Can be used to display a label for custom hooks in React DevTools."
  }
,
  "Axios API": {
    "prefix": "axios-init",
    "body": [
      "import axios from 'axios';",
      "",
      "const api = axios.create({",
      "  baseURL: '${1}',",
      "});",
      "",
      "export default api;",
      ""
    ],
    "description": "Create Axios Configuration file"
  },
  "Root Reducer": {
    "prefix": "root-reducer",
    "body": [
      "import { combineReducers } from 'redux';",
      "",
      "const reducers = combineReducers({",
      "  example: () => [],",
      "});",
      "",
      "export default reducers;",
      ""
    ],
    "description": "Create Ducks index.js file"
  },
  "Root Saga": {
    "prefix": "root-saga",
    "body": [
      "import { all } from 'redux-saga/effects';",
      "",
      "export default function* rootSaga() {",
      "  yield all([]);",
      "}",
      ""
    ],
    "description": "Create Sagas index.js file"
  },
  "Duck": {
    "prefix": "duck",
    "body": [
      "import Immutable from 'seamless-immutable';",
      "",
      "export const Types = {${1}};",
      "",
      "const INITIAL_STATE = Immutable({${2}});",
      "",
      "export default function ${3:functionName}(state = INITIAL_STATE, action) {",
      "  switch (action.type) {",
      "    ${4}",
      "    default:",
      "      return state;",
      "  }",
      "}",
      "",
      "export const Creators = {${5}};",
      ""
    ],
    "description": "Create React Native Duck Module"
  },
  "Redux Sauce Duck": {
    "prefix": "rsduck",
    "body": [
      "import { createReducer, createActions } from 'reduxsauce';",
      "import Immutable from 'seamless-immutable';",
      "",
      "/* Types & Action Creators */",
      "",
      "const { Types, Creators } = createActions({",
      "// actionType: ['dataPassed'],",
      "});",
      "",
      "export const ${1:typeName}Types = Types;",
      "export default Creators;",
      "",
      "/* Initial State */",
      "",
      "export const INITIAL_STATE = Immutable({",
      "// data: [],",
      "});",
      "",
      "/* Reducers */",
      "",
      "// export const reducer = state =>",
      "//   state.merge({ data: [] });",
      "",
      "/* Reducers to types */",
      "",
      "export const reducer = createReducer(INITIAL_STATE, {",
      "// [Types.ACTION_TYPE]: reducer,",
      "});",
      ""
    ],
    "description": "Create ReactJS Duck Module with Reduxsauce"
  },
  "Create Store": {
    "prefix": "cs",
    "body": [
      "import { createStore, compose, applyMiddleware } from 'redux';",
      "import createSagaMiddleware from 'redux-saga';",
      "",
      "import reducers from './ducks';",
      "import sagas from './sagas';",
      "",
      "const middlewares = [];",
      "",
      "const sagaMonitor = process.env.NODE_ENV === 'development' ? console.tron.createSagaMonitor() : null;",
      "",
      "const sagaMiddleware = createSagaMiddleware({ sagaMonitor });",
      "",
      "middlewares.push(sagaMiddleware);",
      "",
      "const composer = process.env.NODE_ENV === 'development'",
      "  ? compose(",
      "    applyMiddleware(...middlewares),",
      "    console.tron.createEnhancer(),",
      "  )",
      "  : compose(applyMiddleware(...middlewares));",
      "",
      "const store = createStore(reducers, composer);",
      "",
      "sagaMiddleware.run(sagas);",
      "",
      "export default store;"
    ],
    "description": "Create Store index.js file"
  }
,
  "HOC With Redux": {
    "prefix": "hocredux",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const mapStateToProps = state => ({",
      "",
      "})",
      "",
      "export const mapDispatchToProps = {",
      " ",
      "}",
      "",
      "export const ${1:hocComponentName} = (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  return hocComponent",
      "}",
      "",
      "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))",
      ""
    ]
  },
  "HOC": {
    "prefix": "hoc",
    "body": [
      "import React from 'react'",
      "",
      "export default (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  return hocComponent",
      "}",
      ""
    ],
    "description": "高阶组件模板。 high order component template "
  }
,
  "Eslint Disable Line": {
    "prefix": "eslint-disable-line",
    "body": "// eslint-disable-line",
    "description": " Eslint 注释掉下一行报错 Eslint Disable Line "
  },

  "Import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "Import No Module Name": {
    "prefix": "imn",
    "body": "import '${1:module}'$0"
  },
  "Import Everything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0"
  },
  "Import As": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "Export Default": {
    "prefix": "ed",
    "body": "export default $1$0"
  },
  "Export Destructing": {
    "prefix": "exd",
    "body": "export { $2 } from '${1:module}'$0"
  },
  "Export As": {
    "prefix": "exa",
    "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "Export Named Function": {
    "prefix": "enf",
    "body": [
      "export const ${1:functionName} = (${2:params}) => {",
      "  $0",
      "}",
      ""
    ],
    "description": "Export named function in ES7 syntax"
  },
  "Export Default Function": {
    "prefix": "edf",
    "body": ["export default (${1:params}) => {", "  $0", "}", ""],
    "description": "Export default function in ES7 syntax"
  },

  "For Each": {
    "prefix": "fre",
    "body": ["${1:array}.forEach(${2:currentItem} => {", "  ${0}", "})", ""],
    "description": "Creates a forEach statement in ES7 syntax"
  },
  "For Of": {
    "prefix": "fof",
    "body": ["for(let ${1:item} of ${2:object}) {", "  ${0}", "}", ""],
    "description": "Iterating over property names of iterable objects"
  },
  "For In": {
    "prefix": "fin",
    "body": ["for(let ${1:item} in ${2:object}) {", "  ${0}", "}", ""],
    "description": "Iterating over property values of iterable objects"
  },
  "Anonymous Function": {
    "prefix": "anfn",
    "body": ["(${1:params}) => {", "  ${2}", "}", ""],
    "description": "Creates an anonymous function in ES7 syntax"
  },
  "Named Function": {
    "prefix": "nfn",
    "body": ["const ${1:name} = (${2:params}) => {", "  ${3}", "}", ""],
    "description": "Creates a named function in ES7 syntax"
  },
  "Destructing Object": {
    "prefix": "dob",
    "body": "const {${1:propertyName}} = ${2:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "Destructing Array": {
    "prefix": "dar",
    "body": "const [${1:propertyName}] = ${2:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
  },

  "Comment Big Block": {
    "prefix": "cmmb",
    "body": [
      "/**",
      "|--------------------------------------------------",
      "| $1",
      "|--------------------------------------------------",
      "*/"
    ]
  },
  "Comment Big Line": {
    "prefix": "cml",
    "body": "// ============================================================"
  }
,
  "React Native Component": {
    "prefix": "rnc",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export default class ${1:componentName} extends Component {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text> ${2:textInComponent} </Text>",
      "      </View>",
      "    )",
      "  }",
      "}"
    ]
  },
  "React Native Component Export": {
    "prefix": "rnce",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "class ${1:componentName} extends Component {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text> ${2:textInComponent} </Text>",
      "      </View>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:componentName}"
    ]
  },
  "React Native Class Component Redux": {
    "prefix": "rncredux",
    "body": [
      "import React, { Component } from 'react'",
      "import { View, Text } from 'react-native'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "class ${1:componentName} extends Component {",
      "  static propTypes = {",
      "    ${2:prop}: ${3:PropTypes}",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text> ${2:textInComponent} </Text>",
      "      </View>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "  ",
      "})",
      "",
      "const mapDispatchToProps = {",
      "  ",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:componentName})",
      ""
    ],
    "description": "Creates a React Native component class with PropTypes with connected redux and ES7 module system"
  },
  "React Native Functional Component": {
    "prefix": "rnfc",
    "body": [
      "import React from 'react';",
      "import { View, Text } from 'react-native';",
      "",
      "export default function ${1:componentName}() {",
      "  return (",
      "    <View>",
      "      <Text>$0</Text>",
      "     </View>",
      "  );",
      "}",
      ""
    ],
    "description": "Creates a React Native functional component"
  },
  "React Native Import": {
    "prefix": "imrn",
    "body": "import { ${1:moduleName} } from 'react-native'"
  },
  "React Native Style": {
    "prefix": "rnstyle",
    "body": "const styles = StyleSheet.create({})"
  }
,
  "Import Redux Statement": {
    "prefix": "redux",
    "body": ["import { connect } from 'react-redux'", ""]
  },

  "React Class Compoment Redux": {
    "prefix": "rcredux",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "class ${1:componentName} extends Component {",
      "  static propTypes = {",
      "    ${2:prop}: ${3:PropTypes}",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div>",
      "        $0",
      "      </div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "  ",
      "})",
      "",
      "const mapDispatchToProps = {",
      "  ",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:componentName})",
      ""
    ],
    "description": "Creates a React component class with PropTypes with connected redux and ES7 module system"
  },
  "Mapping To Props": {
    "prefix": "reduxmap",
    "body": [
      "const mapStateToProps = (state) => ({",
      "  ${1}",
      "})",
      "",
      "const mapDispatchToProps = {",
      "  ",
      "}",
      ""
    ]
  },
  "Redux Action": {
    "prefix": "rxaction",
    "body": [
      "export const ${1:actionName} = (${2:param}) => ({",
      "  type: ${3:type},",
      "  payload: ${4:payload}",
      "})",
      ""
    ]
  },
  "Redux Const": {
    "prefix": "rxconst",
    "body": "export const ${1:constantName} = '${1:constantName}'"
  },
  "Redux Reducer": {
    "prefix": "rxreducer",
    "body": [
      "const initialState = {",
      "",
      "}",
      "",
      "export default (state = initialState, action) => {",
      "  switch (action.type) {",
      "",
      "  case ${1:typeName}:",
      "    return { ...state }",
      "",
      "  default:",
      "    return state",
      "  }",
      "}",
      ""
    ]
  },

  "Redux useDispatch": {
    "prefix": "useDispatch",
    "body": [
      "import { useDispatch } from 'react-redux'",
      "",
      "const dispatch = useDispatch()"
    ],
    "description": ["hooks获取dispatch。 Returns a Dispatch from redux"]
  },

  "Redux useSelector": {
    "prefix": "useSelector",
    "body": [
      "const _${2:selectorName} = useSelector(s => s.${1:selector}.${2:selectorName})"
    ],
    "description": ["hooks获取store中的值。 Returns a Store value from redux"]
  },

  "Redux Dispatch Action": {
    "prefix": "rdxdaction",
    "body": [
      "dispatch({",
      "  type: ${1:type},",
      "  payload: ${2:payload}",
      "})",
      ""
    ],
    "description": ["执行dispatch函数。 Call redux dispatch function"]
  }
,
  "React Router Import": {
    "prefix": "imrr",
    "body": [
      "import { BrowserRouter as Router,Route} from 'react-router-dom'"
    ],
    "description": "引入react router。 import react-router"
  },
  "React Router NavLink Import": {
    "prefix": "imnl",
    "body": "import { NavLink } from 'react-router-dom'",
    "description": "引入NavLink。 import NavLink"
  },
  "React Router With Router Import": {
    "prefix": "imwr",
    "body": "import { withRouter } from 'react-router-dom'",
    "description": "引入withRouter。 import withRouter"
  },

  "React Router Route": {
    "prefix": "route",
    "body": "<Route path='${1:path}' component={${2:component}}/>",
    "description": "Route组件。Route Component"
  },
  "React Router NavLink": {
    "prefix": "navlink",
    "body": "<NavLink to={${1:path}}>{$anchorText}</NavLink>",
    "description": "NavLink组件。NavLink Component"
  }
,
  "Import React": {
    "prefix": "imr",
    "body": ["import React from 'react'", ""]
  },
  "Import React, { Component }": {
    "prefix": "imrc",
    "body": ["import React, { Component } from 'react'", ""]
  },
  "Import React, { Component } & PropTypes": {
    "prefix": "imrcp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "Import React, { PureComponent }": {
    "prefix": "imrpc",
    "body": ["import React, { PureComponent } from 'react'", ""]
  },
  "Import React, { PureComponent } & PropTypes": {
    "prefix": "imrpcp",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "React Class Compoment": {
    "prefix": "rcc",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:componentName} extends Component {",
      "  render() {",
      "    return (",
      "      <>",
      "        $0",
      "      </>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "React Class Export Component": {
    "prefix": "rce",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "class ${1:componentName} extends Component {",
      "  render() {",
      "    return (",
      "      <>",
      "        $0",
      "      </>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:componentName}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "React Functional Export Component": {
    "prefix": "rfe",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:componentName} = () => {",
      "  return (",
      "    <>",
      "      $0",
      "    </>",
      "  )",
      "}",
      "",
      "export default ${1:componentName}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "React Functional Export Component With PropTypes": {
    "prefix": "rfep",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:componentName} = () => {",
      "  return (",
      "    <>",
      "      $0",
      "    </>",
      "  )",
      "}",
      "",
      "${1:componentName}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:componentName}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system with PropTypes"
  },
  "React Functional Component": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "export default function ${TM_FILENAME/(.*)\\..+$/${1}/}() {",
      "  return (",
      "    <>",
      "    $0",
      "    </>",
      "  );",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },

  "React Class Pure Component": {
    "prefix": "rpc",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:componentName} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <>",
      "        $0",
      "      </>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "React Class Compoment PropTypes": {
    "prefix": "rccp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default class ${1:componentName} extends Component {",
      "  static propTypes = {",
      "    ${2:prop}: ${3:PropTypes}",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <>",
      "        $0",
      "      </>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with PropTypes and ES7 module system"
  },
  "Class Constructor": {
    "prefix": "rconst",
    "body": [
      "constructor(props) {",
      "  super(props)",
      "",
      "  this.state = {",
      "     $0",
      "  }",
      "}",
      ""
    ],
    "description": "Adds a default constructor for it('', () => {}) the class that contains props as arguments"
  },

  "Get Derived State From Props": {
    "prefix": "rcdsfp",
    "body": [
      "static getDerivedStateFromProps(props, state) {",
      "  $0",
      "}",
      ""
    ],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates. It should return an object to update the state, or null to update nothing."
  },
  "Get Snapshot Before Update": {
    "prefix": "sbu",
    "body": [
      "static getSnapshotBeforeUpdate(prevProps, prevState) {",
      "  $0",
      "}",
      ""
    ],
    "description": "Invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture some information from the DOM (e.g. scroll position) before it is potentially changed."
  },
  "Component Did Catch": {
    "prefix": "cdc",
    "body": ["componentDidCatch(error, info) {", "  $0", "}", ""],
    "description": "This lifecycle is invoked after an error has been thrown by a descendant component."
  },
  "Component Did Mount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "  $0", "}", ""],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "Component Did Mount (Arrow func)": {
    "prefix": "cdma",
    "body": ["componentDidMount = () => {", "  $0", "}", ""],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "Should Component Update": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "  $0", "}", ""],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "Should Component Update (Arrow func)": {
    "prefix": "scua",
    "body": [
      "shouldComponentUpdate = (nextProps, nextState) => {",
      "  $0",
      "}",
      ""
    ],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "Component Did Update": {
    "prefix": "cdup",
    "body": ["componentDidUpdate(prevProps, prevState) {", "  $0", "}", ""],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "Component Did Update (Arrow func)": {
    "prefix": "cdupa",
    "body": [
      "componentDidUpdate = (prevProps, prevState) => {",
      "  $0",
      "}",
      ""
    ],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "Component Will Unmount": {
    "prefix": "cwun",
    "body": ["componentWillUnmount() {", "  $0", "}", ""],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "Component Will Unmount (Arrow func)": {
    "prefix": "cwuna",
    "body": ["componentWillUnmount = () => {", "  $0", "}", ""],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "Component Will Mount - [Deprecated]": {
    "prefix": "cwm",
    "body": ["componentWillMount() {", "  $0", "}", ""],
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "Component Will Mount (Arrow func) - [Deprecated]": {
    "prefix": "cwma",
    "body": ["componentWillMount = () => {", "  $0", "}", ""],
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "Component Will Receive Props - [Deprecated]": {
    "prefix": "cwr",
    "body": ["componentWillReceiveProps(nextProps) {", "  $0", "}", ""],
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "Component Will Receive Props (Arrow func) - [Deprecated]": {
    "prefix": "cwra",
    "body": ["componentWillReceiveProps = (nextProps) => {", "  $0", "}", ""],
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "Component Will Update - [Deprecated]": {
    "prefix": "cwup",
    "body": ["componentWillUpdate(nextProps, nextState) {", "  $0", "}", ""],
    "description": "Invoked immediately before rendering when new props or state are being received."
  },
  "Component Will Update (Arrow func) - [Deprecated]": {
    "prefix": "cwupa",
    "body": [
      "componentWillUpdate = (nextProps, nextState) => {",
      "  $0",
      "}",
      ""
    ],
    "description": "Invoked immediately before rendering when new props or state are being received."
  },
  "Component Render": {
    "prefix": "ren",
    "body": [
      "render() {",
      "  return (",
      "    <>",
      "      $0",
      "    </>",
      "  )",
      "}"
    ],
    "description": "Basic render."
  },
  "Component Set State Object": {
    "prefix": "sst",
    "body": "this.setState({$0})",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "Component Set State Func": {
    "prefix": "ssf",
    "body": ["this.setState((state, props) => { return { $0 }})", ""],
    "description": "Performs a shallow merge of nextState into current state"
  },
  "Component Props": {
    "prefix": "props",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "Component State": {
    "prefix": "state",
    "body": "this.state.$0"
  }
,
  "Describe Block": {
    "prefix": "describe",
    "body": ["describe('$1', () => {", "  $0", "})", ""],
    "description": "测试describe模块。 Testing `describe` block"
  },
  "Test Block": {
    "prefix": "test",
    "body": ["test('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `test` block"
  },
  "It Block": {
    "prefix": "tit",
    "body": ["it('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `it` block"
  },
  "Setup Test": {
    "prefix": "stest",
    "body": [
      "import { ${1:ComponentName}, mapStateToProps, mapDispatchToProps } from '../${1:ComponentName}'",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "  const defaultProps = {",
      "",
      "  }",
      "",
      "  const setup = buildSetup(${1:ComponentName}, defaultProps)",
      "",
      "  test('render', () => {",
      "    expect(setup().wrapper).toMatchSnapshot()",
      "  })",
      "})",
      ""
    ]
  },
  "Setup Test With Enzyme To Json": {
    "prefix": "sjtest",
    "body": [
      "import toJson from 'enzyme-to-json'",
      "import { ${1:ComponentName}, mapStateToProps, mapDispatchToProps } from '../${1:ComponentName}'",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "  const defaultProps = {",
      "",
      "  }",
      "",
      "  const setup = buildSetup(${1:ComponentName}, defaultProps)",
      "",
      "  test('render', () => {",
      "    expect(toJson(setup().wrapper)).toMatchSnapshot()",
      "  })",
      "})",
      ""
    ]
  },
  "Setup React Native Test": {
    "prefix": "sntest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import ${1:ComponentName} from '../${1:ComponentName}'",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "  const defaultProps = {",
      "",
      "  }",
      "",
      "  const wrapper = renderer.create(<${1:ComponentName,...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})",
      ""
    ]
  },
  "Setup React Native Test With Redux": {
    "prefix": "snrtest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from 'src/store/configureStore'",
      "import ${1:ComponentName} from '../${1:ComponentName}'",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "  const defaultProps = {",
      "",
      "  }",
      "",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "      <${1:ComponentName,...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})",
      ""
    ]
  }
}
